####Bibliotecas####
install.packages("mosaicCalc")
install.packages("ggplot2")
install.packages("treemapify")
install.packages("gganimate")
install.packages("gifski")
install.packages("png")
library(mosaicCalc)
library(ggplot2)
library(treemapify)
library(gganimate)
library(gifski)
library(png)


####Começo####
x=1:4
z=matrix(x, nrow = 2, byrow = F) #Cria matriz com 2 linhas utilizando o vetor x, ordenando por coluna
z
z=matrix(x, nrow = 2, byrow = T) #Cria matriz com 2 linhas utilizando o vetor x, ordenando por linha
z
solve(z) #Inversa da matriz
t(z)
determinant(z)
D(expression(x^2), 'x')
D(expression(tan(x)*sin(x)^2), 'x')




#funcoes 
func=function(x){
  2*x-1
}
func(1)


#curva de -10 a 10
curve(func, -10, 10)


#linha h=horiz. v=vert.
abline(h=0, col='red')


#raiz
uniroot(func, lower = 0, upper = 4)

func2=function(x){
  2*x^2-3*x-4
}
curve(func2, -2, 3)
abline(h=0, v=0)

multiroot(func2, start = c(-1,2))
abline(v=c(-0.850,2.350), col=2)

integrate(func, 0, 2)


#ex1
#Crie uma funcao para a equação
func3=function(x){
  x^2-5*x+6
}


#Faca um grafico para verificar as raizes
curve(func3, 1, 3)
abline(h=0, v=0)


#Determine as raizes 
multiroot(func3, start = c(2,3))
abline(v=c(2, 3), col='green')


#Calcule a àrea entre as raizes
integrate(func3, 2, 3)


#Base de Dados
idade=c(18,20,23,25)
sexo=c('M', 'F', 'F', 'M')

dados = data.frame(idade, sexo)
dados

(dados1 = read.csv('dados01.csv',sep = ',',dec = ',',header = TRUE))

(dadosTeste = read.csv('dados02.csv', sep=',',dec = ',', header = TRUE))
(dados1$classe=c('a', 'a', 'b', 'b'))
names(dados1)
head(dados1, 2)
dim(dados1)

dados1[c(1,3),1]
dados1[1:3, 1]
dados1[4,3] = 'c'
dados1$tipo=ifelse(dados1$idade<=20, 'jovem', 'tmj')

(dadosEx = read.csv('dados03.csv', sep = ',', dec = ',', header = TRUE))

imc = function(peso, altura){
  round(peso/(altura^2),2)
}

dadosEx$imc=imc(dadosEx$peso, dadosEx$altura)
dadosEx$imcCat=ifelse(dadosEx$imc>=19, 'normal', 'baixo')


(dados = read.csv('dados_plot.csv', sep = ',', dec = '.', header = TRUE))
head(dados)

names(dados)
names(dados) = c('linha', 'empresas', 'rendimento', 'tamanho', 'vendas', 'palavra', 'fre_palavra')
head(dados)

#Retorna a quantidade de empresas de cada tipo em uma tabela
table(dados$empresas)

#Média de rendimentos por empresa
#          valores                  por          medida
tapply(dados$redimento, dadosPlot$empresas, mean)

#### grafico de coluna / linha ####
ggplot(dados, aes(x=empresas))
ggplot(dados, aes(x=empresas)) + geom_bar()
ggplot(dados, aes(x=empresas)) + geom_bar() + coord_flip()
ggplot(dados, aes(x=empresas, fill=empresas)) + geom_bar()
ggplot(dados, aes(x=empresas, fill=empresas)) + geom_bar() + labs(title = 'Titulo', x = 'Empresas', y = 'Total') + 
  coord_flip()

ggplot(dados, aes(x=empresas, fill=empresas)) + geom_bar() + labs(title = 'Titulo', x = 'Empresas', y = 'Total') + 
  coord_flip() + scale_fill_brewer(palette = 'Greys')

ggplot(dados, aes(x=empresas, fill=empresas)) + geom_bar() + labs(title = 'Titulo', x = 'Empresas', y = 'Total') + 
  coord_flip() + scale_fill_brewer(palette = 'Greys') + theme_minimal()

ggplot(dados, aes(x=empresas, fill=tamanho)) + geom_bar() + labs(title = 'Titulo', x = 'Empresas', y = 'Total') + 
  coord_flip() + scale_fill_brewer(palette = 'YlGn') + theme_minimal()

ggplot(dados, aes(x=empresas, fill=tamanho)) + geom_bar() + labs(title = 'Titulo', x = 'Empresas', y = 'Total') + 
  scale_fill_brewer(palette = 'YlGn') + theme_minimal() + facet_wrap(~tamanho)


#### grafico de dispersão ####
ggplot(dados, aes(x=rendimento, y=vendas)) + geom_point()

ggplot(dados, aes(x=rendimento, y=vendas)) + geom_point() + geom_smooth()

ggplot(dados, aes(x=rendimento, y=vendas, col=empresas)) + geom_point() + geom_smooth()

ggplot(dados, aes(x=rendimento, y=vendas, col=empresas)) + geom_point() + geom_smooth(se=FALSE)

ggplot(dados, aes(x=rendimento, y=vendas, col=empresas)) + geom_point() + geom_smooth(se=FALSE) +
  facet_wrap(~empresas) + theme_classic()


#### grafico pizza ####
table(dados$empresas)
dados1 = as.data.frame(table(dados$empresas))
names(dados1)[1] = 'Empresa'

dados2 = dados1
dados2$Freq = round(dados2$Freq/sum(dados2$Freq), 3)
dados2$cum = cumsum(dados2$Freq)

ggplot(dados2, aes(x ="", y = Freq,fill = Empresa)) +  geom_bar(width = 1, stat="identity") + coord_polar("y",start = 0) +
  scale_fill_brewer(palette="Set3")

#text: geom_text()
ggplot(dados2, aes(x ="", y = Freq,fill = Empresa)) +
  geom_bar(width = 1, stat="identity") + coord_polar("y",start = 0) +
  scale_fill_brewer(palette="Set3")+geom_text(aes(y = cum-0.2, label = Freq), color ="black")

ggplot(dados2, aes(x =2, y = Freq,fill = Empresa)) +
  geom_bar(width = 1, stat="identity") + coord_polar("y",start = 0) +
  scale_fill_brewer(palette="Set3")+geom_text(aes(y = cum-0.2, label = Freq), color ="black") + xlim(0.5, 2.5)

#### grafico histograma ####
#Utiliza para valores continuos 
ggplot(dados, aes(rendimento)) + geom_histogram()
#numero de grupos : gins
ggplot(dados, aes(rendimento)) + geom_histogram(bins = 5)
#cor: fill
ggplot(dados, aes(rendimento)) + geom_histogram(bins = 5, fill='orange')
#aes(fill= empresa)
ggplot(dados, aes(rendimento)) + geom_histogram(aes(fill=empresas), bins=5)


#### grafico de densidade ####
#Utiliza-se para valores continuos também
ggplot(dados, aes(rendimento)) + geom_density()
#por empreas aes(fill=factor(empresa))
ggplot(dados, aes(rendimento)) + geom_density(aes(fill=factor(empresas)))
#transparencia: (alpha=)
ggplot(dados, aes(rendimento)) + geom_density(aes(fill=factor(empresas)),alpha=0.5)


#### grafico boxplot ####
#Utiliza-se para valores continuos
ggplot(dados, aes(y=rendimento)) + geom_boxplot()
ggplot(dados, aes(x=empresas, y=rendimento)) + geom_boxplot()
ggplot(dados, aes(x=empresas, y=rendimento, fill=empresas)) + geom_boxplot()
ggplot(dados, aes(x=empresas, y=rendimento, fill=empresas)) + geom_boxplot() + facet_wrap(~tamanho)


#### grafico violino ####
#utiliza-se para valores continuos
ggplot(dados, aes(x=empresas, y=rendimento, fill=empresas)) + geom_violin() 
ggplot(dados, aes(x=rendimento, y=empresas, fill=empresas)) + geom_violin()


####rendimento medio por tamanho x empresa####

ggplot(dados1, aes(area=Freq, fill=Empresa)) + geom_treemap()

dados$interacao = interaction(dados$tamanho, dados$empresas)
dados3 = as.data.frame(tapply(dados$rendimento, dados$interacao, mean))
names(dados3)[1] ='total'

dados3$nomes = labels(dados3)[[1]]
ggplot(dados3, aes(area=total, fill=nomes)) + geom_treemap()


#### nuvem de letras ####
dados4 = dados[,6:7]
wordcloud2(data=dados4, size=1.6)



####Prova1####
dados_p = read.csv("dados1.csv");
head(dados_p)
ggplot(dados_p, aes(x=fabricante, fill=tamanho)) + geom_bar() + labs(title = 'Fabricante x Tamanho', x = 'Fabricante', y = 'Tamanhos') +
  scale_fill_brewer(palette = 'YlGn')

ggplot(dados_p, aes(x = fabricante, y=resistencia, fill = fabricante)) + geom_boxplot() + facet_wrap(~tamanho) +
  labs(title='Resistencia x Frabricante', x = 'Fabricante', y = 'Resistencia')


interacao=interaction(dados_p$fabricante,dados_p$tamanho)
dados1=as.data.frame(tapply(dados_p$resistencia, interacao, mean))
dados1$Fabricante_Tamanho=labels(dados1)[[1]]
names(dados1)[1] = 'media'
ggplot(dados1, aes(area=media, fill=Fabricante_Tamanho)) + geom_treemap() + labs(title = 'Média de Resistência de Produtos') +
  scale_fill_brewer(palette = "Set3")

ggplot(dados_p, aes(x=tempo, y=peso, col=tamanho)) + geom_point() + geom_smooth(se=FALSE) +
   theme_classic() + labs(title = 'Tempo x Peso', x = 'Tempo', y = 'Peso')

ggplot(dados_p, aes(x=fabricante, y=resistencia, fill=fabricante)) + geom_violin() + 
  labs(titles = 'Resistência x Fabricante', x = 'Fabricante', y = 'Resistência')



####Modelo Binominal####
#dbinom(quantidade de sucessos, quantidade de tentativas, probabilidade de sucesso)
p1 = dbinom(2, 5, (2/6)) 
p2 = dbinom(0:5, 5, (2/6)) 
#pbinom(quantidade de sucessos menor ou igual a x, ...)
pbinom(2, 5, (2/6))
#qbinom(probabibilidade, ...)
qbinom(0.7901, 5, (2/6))
#rbinom(numero de amostra, ...) = gera a quantidade de sucessos 
rbinom(10, 5, (2/6))

#Gráficos 
##Criando base de dados
#dbinom
x = 0:5
px = dbinom(x, 5, 2/6)
dados = data.frame(x, px)
#pbinom
x = 0:5
px = pbinom(x, 5, 2/6)
dados = data.frame(x, px)


##Gerando o grafico 
ggplot(dados, aes(x, px)) + geom_col()


####Modelo Poisson####
#dpois(prababilidade, media)
dpois(35, 40)
dpois(0:480, 40)
#ppois(probabilidade ou menos, media)
sum(dpois(0:45, 40))
ppois(45, 40)
#qpois(valor da probabilidade, media)
qpois(0.8096, 40)
#rpoid(amostra, media)
rpois(10,40)

##Grafico
x = 0:100;
px = dpois(x, 45)
dados = data.frame(x, px)
ggplot(dados, aes(x, px)) + geom_col()
